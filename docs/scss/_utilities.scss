//Fuctions
@function prefix-mp($property) {
    @if $property == margin {
        @return  'm';
    }
    @if $property == padding {
        @return  'p';
    }
}

@function getPrefixSide($side) {

    @if $side == left {
        @return '-left';
    }
    @if $side == right {
        @return '-right';
    }
    @if $side == top {
        @return '-top';
    }
    @if $side == bottom  {
        @return '-bottom';
    }
     @else {
        @return '';
    }

}

@function getClassInfix($infix) { // clsInfix: sm, md, lg  ..
    @if $infix != '' {
        @return -$infix;
    } @else {
        @return '';
    }
}


// Breakpoints
$breakpoints: (
    xs: 0,  
    sm: 576px,  
    md: 768px,
    lg: 992px,
    xl: 1200px
);


$sides: ( 
    all     :'',
    left    :'l',
    right   :'r',   
    bottom  :'b',
    top     :'t',
    x       :'x',
    y       :'y'
    
 );

//create margins and paddings
/*
    Use class: p-p or m-m and  prefix t, r, b, l --> value 0 to 10
    example: p-p-0 , p-pt-5  ---  m-m-2 , m-ml-3
*/
$max: 10; $offset: 1; $unit: 'rem';
@mixin paddingMargin($property, $classInfix) { //$classInfix: 
    
    $prefix: prefix-mp($property);
    $clsInfix: getClassInfix($classInfix);

    @each $side, $sidePrefix in $sides {
        $i: 0;
        $pfxSide: getPrefixSide($side);  
        
        @while $i <= $max {

            .#{$prefix}-#{$prefix}#{$sidePrefix}#{$clsInfix}-#{$i} { 
               
                @if($side == x) {
                    #{$property}-right#{$pfxSide}: #{$i + $unit} !important;
                    #{$property}-left#{$pfxSide}: #{$i + $unit} !important;
                }
                @else if ($side == y) {
                    #{$property}-top#{$pfxSide}: #{$i + $unit} !important;
                    #{$property}-bottom#{$pfxSide}: #{$i + $unit} !important;
                }
                @else {
                    #{$property}#{$pfxSide}: #{$i + $unit} !important;
                }
            }                    
            $i: $i + $offset;
        }  
    }
}

// WidthS

@mixin WidthS($classInfix) {
    $max: 100; $offset: 5; $unit: '%'; 
    $i: 0;
    $clsInfix: getClassInfix($classInfix);
    @while $i <= $max {
        .w#{$clsInfix}-#{$i} { 
            width: #{$i+$unit} !important;
        }               
        $i: $i + $offset;
    }
}
@mixin Heights($classInfix) {
    $max: 100; $offset: 5; $unit: '%'; 
    $i: 0;
    $clsInfix: getClassInfix($classInfix);
    @while $i <= $max {
        .h#{$clsInfix}-#{$i} { 
            height: #{$i+$unit} !important;
        }               
        $i: $i + $offset;
    }
}

@mixin createUtilities() {
    @each $classInfix, $break in $breakpoints {

        @if $break != 0 {        
            @media screen and(min-width: $break) {
                @include WidthS($classInfix);
                @include Heights($classInfix);
                @include paddingMargin('padding', $classInfix);
                @include paddingMargin('margin', $classInfix);
            }

        } @else {
            @include WidthS('');
            @include Heights('');
            @include paddingMargin('padding', '');
            @include paddingMargin('margin', '');
        }
    }
}

@include createUtilities();

.fw-500 {
    font-weight: 500 !important;
}
.fw-200 {
    font-weight: 200 !important;
}
.p-fw-500 {
    p {
        font-weight: 500 !important;
    }
}
.rounded-4 {
    border-radius: 0.4rem !important;
}
.rounded-5 {
    border-radius: 0.5rem !important;
}
.rounded-1r {
    border-radius: 1rem !important;
}
.rounded-t-5 {
    border-radius: 0.5rem 0.5rem 0 0 !important;
}
.rounded-b-5 {
    border-radius: 0 0 0.5rem 0.5rem !important;
}
.margin-0 {
    margin: 0px !important;
}
.list-style-none {
    list-style: none !important;
}
.font-fabfeltscrip {
    font-family:"fabfeltscript-bold";
    text-transform:none;
    font-size: 30px !important;
}
.fs-5px {
    font-size: 5px !important;
}
.fs-6px {
    font-size: 6px !important;
}
.fs-7px {
    font-size: 7px !important;
}
.fs-8px {
    font-size: 8px !important;
}
.fs-9px {
    font-size: 9px !important;
}
.fs-9px {
    font-size: 9px !important;
}
.fs-10px {
    font-size: 10px !important;
}
.fs-11px {
    font-size: 11px !important;
}
.fs-12px {
    font-size: 12px !important;
}
.fs-13px {
    font-size: 13px !important;
}
.fs-14px {
    font-size: 14px !important;
}
.fs-15px {
    font-size: 15px !important;
}
.fs-16px {
    font-size: 16px !important;
}
.fs-17px {
    font-size: 18px !important;
}

.fs-25px {
    font-size: 25px !important;
}
.fs-70px {
    font-size: 70px !important;
}

.fs-i-lg {
    font-size: 50px !important;
}

.right-0 {
    right: 0;
}
.left-0 {
    left: 0;
}

.cursor-pointer {
    cursor: pointer;
}

//roundeds
.rounded-left-3 {
    border-radius: 0.3rem 0 0 0.3rem;
}
.rounded-7 {
    border-radius: 1.5rem !important;
}

.position-top {
    position: absolute;
    top: 0;
    width: 100%;
}

.active-info {
    color: var(--bs-info) !important;
}
.active-orange {
    color: var(--bs-orange) !important;
}
.white{
    color: #ffffff !important;
}

//texts
.text-justify {
    text-align: justify !important;
}
.lh-1 {
    line-height: 1;
}
.lh-1-4 {
    line-height: 1.4;
}
.lh-1-8 {
    line-height: 1.8;
}

//Colors
.text-gray {
    color: #6c757d9e; 
}

.op-8 {
    opacity: 0.8 !important;
}
.op-9 {
    opacity: 0.9 !important;
}

.modal-open {
    padding-right: 17px;
}

.object-fit-cover {
    object-fit: cover;
}

.zi-1 {
    z-index: 1 !important;
}

@media screen and(min-width: 1200px ) {
    //sizez
    .fs-xl-105px {
        font-size:105px;
    }
}